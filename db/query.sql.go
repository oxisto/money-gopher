// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
)

const createSecurity = `-- name: CreateSecurity :one
INSERT INTO securities (id, display_name)
VALUES (?, ?)
RETURNING id, display_name, quote_provider
`

type CreateSecurityParams struct {
	ID          string
	DisplayName string
}

func (q *Queries) CreateSecurity(ctx context.Context, arg CreateSecurityParams) (*Security, error) {
	row := q.db.QueryRowContext(ctx, createSecurity, arg.ID, arg.DisplayName)
	var i Security
	err := row.Scan(&i.ID, &i.DisplayName, &i.QuoteProvider)
	return &i, err
}

const getSecurity = `-- name: GetSecurity :one
SELECT id, display_name, quote_provider FROM securities
WHERE id = ?
`

func (q *Queries) GetSecurity(ctx context.Context, id string) (*Security, error) {
	row := q.db.QueryRowContext(ctx, getSecurity, id)
	var i Security
	err := row.Scan(&i.ID, &i.DisplayName, &i.QuoteProvider)
	return &i, err
}

const listSecurities = `-- name: ListSecurities :many
SELECT id, display_name, quote_provider FROM securities
ORDER BY id
`

func (q *Queries) ListSecurities(ctx context.Context) ([]*Security, error) {
	rows, err := q.db.QueryContext(ctx, listSecurities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Security
	for rows.Next() {
		var i Security
		if err := rows.Scan(&i.ID, &i.DisplayName, &i.QuoteProvider); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
