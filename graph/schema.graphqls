scalar Date

type Currency {
  value: Int!
  symbol: String!
}

type Security {
  id: String!
  displayName: String!
  quoteProvider: String
  listedAs: [ListedSecurity!]
}

type ListedSecurity {
  ticker: String!
  currency: String!
  security: Security!
  latestQuote: Currency
  latestQuoteTimestamp: Date
}

type Portfolio {
  id: String!
  displayName: String!
  bankAccount: BankAccount!
  snapshot(when: Date!): PortfolioSnapshot
  events: [PortfolioEvent!]!
}

enum PortfolioEventType {
  BUY
  SELL
  DIVIDEND
}

type PortfolioEvent {
  time: Date!
  type: PortfolioEventType!
  security: Security
}

type PortfolioSnapshot {
  time: Date!
  positions: [PortfolioPosition!]!
  firstTransactionTime: Date!
  cash: Currency!
}

type PortfolioPosition {
  security: Security!
  quantity: Int!

  """
  PurchaseValue was the market value of this position when it was bought (net;
  exclusive of any fees).
  """
  purchaseValue: Currency!

  """
  PurchasePrice was the market price of this position when it was bought (net;
  exclusive of any fees).
  """
  purchasePrice: Currency!

  """
  MarketValue is the current market value of this position, as retrieved from
  the securities service.
  """
  marketValue: Currency!

  """
  MarketPrice is the current market price of this position, as retrieved from
  the securities service.
  """
  marketPrice: Currency!

  """
  TotalFees is the total amount of fees accumulating in this position through
  various transactions.
  """
  totalFees: Currency!

  """
  ProfitOrLoss contains the absolute amount of profit or loss in this position.
  """
  profitOrLoss: Currency!

  """
  Gains contains the relative amount of profit or loss in this position.
  """
  gains: Float!
}

type BankAccount {
  id: String!
  displayName: String!
}

input SecurityInput {
  id: String!
  displayName: String!
  listedAs: [ListedSecurityInput!]
}

input ListedSecurityInput {
  ticker: String!
  currency: String!
}

type Mutation {
  createSecurity(input: SecurityInput!): Security!
  updateSecurity(id: ID!, input: SecurityInput!): Security!
  """
  Triggers a quote update for the given security IDs. If no security IDs are
  provided, all securities will be updated.
  """
  triggerQuoteUpdate(securityIDs: [String!]): Boolean!
}

type Query {
  security(id: String!): Security
  securities: [Security!]!

  portfolio(id: String!): Portfolio
  portfolios: [Portfolio!]!
}
