// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"

	"github.com/oxisto/money-gopher/persistence"
)

type ListedSecurityInput struct {
	Ticker   string `json:"ticker"`
	Currency string `json:"currency"`
}

type Mutation struct {
}

type PortfolioPosition struct {
	Security *persistence.Security `json:"security"`
	Quantity int                   `json:"quantity"`
	// PurchaseValue was the market value of this position when it was bought (net;
	// exclusive of any fees).
	PurchaseValue *persistence.Currency `json:"purchaseValue"`
	// PurchasePrice was the market price of this position when it was bought (net;
	// exclusive of any fees).
	PurchasePrice *persistence.Currency `json:"purchasePrice"`
	// MarketValue is the current market value of this position, as retrieved from
	// the securities service.
	MarketValue *persistence.Currency `json:"marketValue"`
	// MarketPrice is the current market price of this position, as retrieved from
	// the securities service.
	MarketPrice *persistence.Currency `json:"marketPrice"`
	// TotalFees is the total amount of fees accumulating in this position through
	// various transactions.
	TotalFees *persistence.Currency `json:"totalFees"`
	// ProfitOrLoss contains the absolute amount of profit or loss in this position.
	ProfitOrLoss *persistence.Currency `json:"profitOrLoss"`
	// Gains contains the relative amount of profit or loss in this position.
	Gains float64 `json:"gains"`
}

type PortfolioSnapshot struct {
	Time                 string                `json:"time"`
	Positions            []*PortfolioPosition  `json:"positions"`
	FirstTransactionTime string                `json:"firstTransactionTime"`
	Cash                 *persistence.Currency `json:"cash"`
}

type Query struct {
}

type SecurityInput struct {
	ID          string                 `json:"id"`
	DisplayName string                 `json:"displayName"`
	ListedAs    []*ListedSecurityInput `json:"listedAs,omitempty"`
}

type PortfolioEventType string

const (
	PortfolioEventTypeBuy      PortfolioEventType = "BUY"
	PortfolioEventTypeSell     PortfolioEventType = "SELL"
	PortfolioEventTypeDividend PortfolioEventType = "DIVIDEND"
)

var AllPortfolioEventType = []PortfolioEventType{
	PortfolioEventTypeBuy,
	PortfolioEventTypeSell,
	PortfolioEventTypeDividend,
}

func (e PortfolioEventType) IsValid() bool {
	switch e {
	case PortfolioEventTypeBuy, PortfolioEventTypeSell, PortfolioEventTypeDividend:
		return true
	}
	return false
}

func (e PortfolioEventType) String() string {
	return string(e)
}

func (e *PortfolioEventType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PortfolioEventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PortfolioEventType", str)
	}
	return nil
}

func (e PortfolioEventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
