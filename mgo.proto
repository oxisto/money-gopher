syntax = "proto3";

package mgo.portfolio.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";

message PortfolioCreateMessage { string name = 1; }

message GetPortfolioSnapshotRequest {
  // PortfolioName is the name / identifier of the portfolio we want to
  // "snapshot".
  string portfolio_name = 1;

  // Time is the point in time of the requested snapshot.
  google.protobuf.Timestamp time = 2;
}

message Portfolio {
  string name = 1;

  // Events contains all portfolio events, such as buy/sell transactions,
  // dividends or other. They need to be ordered by time (ascending).
  repeated PortfolioEvent events = 2;
}

// PortfolioSnapshot represents a snapshot in time of the portfolio. It can for
// example be the current state of the portfolio but also represent the state of
// the portfolio at a certain time in the past.
message PortfolioSnapshot {
  google.protobuf.Timestamp time = 1;
  map<string, PortfolioPosition> positions = 2;

  float total_value = 10;
}

message PortfolioPosition {
  string security_name = 1;
  int32 amount = 2;

  // EntryValue was the market value of this position when it was bought
  // (exclusive of any fees).
  float entry_value = 5;

  // TotalFees is the total amount of fees accumulating in this position through
  // various transactions.
  float total_fees = 6;

  // MarketValue is the current market value of this position, as retrieved from
  // the securities service.
  float market_value = 10;
}

message PortfolioEvent {
  oneof event_oneof {
    BuySecurityTransaction buy = 1;
    SellSecurityTransaction sell = 2;
    SecurityDividendEvent dividend = 3;
  }
}

message BuySecurityTransaction {
  string security_name = 1;
  int32 amount = 2;
  float price = 3;
  float fees = 4;
  google.protobuf.Timestamp time = 10;
}
message SellSecurityTransaction {
  string security_name = 1;
  int32 amount = 2;
  float price = 3;
  float fees = 4;
  float taxes = 5;
  google.protobuf.Timestamp time = 10;
}
message SecurityDividendEvent { google.protobuf.Timestamp time = 10; }

service PortfolioService {
  rpc CreatePortfolio(PortfolioCreateMessage) returns (Portfolio);

  rpc GetPortfolioSnapshot(GetPortfolioSnapshotRequest)
      returns (PortfolioSnapshot) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };
}

message Security {
  // Name contains the unique resource name. For a stock or bond, this should be
  // an ISIN.
  string name = 1;

  // DisplayName contains the human readable name.
  string display_name = 2;

  repeated ListedSecurity listed_on = 4;

  optional string quote_provider = 10;
}

message ListedSecurity {
  string security_name = 1;
  string ticker = 3;
  string currency = 4;

  optional float latest_quote = 5;
  optional google.protobuf.Timestamp latest_quote_timestamp = 6;
}

message ListSecuritiesRequest {}

message ListSecuritiesResponse { repeated Security securities = 1; }

message GetSecurityRequest { string name = 1; }

message CreateSecurityRequest { Security security = 1; }

message UpdateSecurityRequest {
  Security security = 1;
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteSecurityRequest { string name = 1; }

message TriggerQuoteUpdateRequest { string security_name = 1; }

message TriggerQuoteUpdateResponse {}

service SecuritiesService {
  rpc ListSecurities(ListSecuritiesRequest) returns (ListSecuritiesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };
  rpc GetSecurity(GetSecurityRequest) returns (Security) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };
  rpc CreateSecurity(CreateSecurityRequest) returns (Security);
  rpc UpdateSecurity(UpdateSecurityRequest) returns (Security);
  rpc DeleteSecurity(DeleteSecurityRequest) returns (google.protobuf.Empty);

  rpc TriggerSecurityQuoteUpdate(TriggerQuoteUpdateRequest)
      returns (TriggerQuoteUpdateResponse);
}
