// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mgo.proto

package portfoliov1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	gen "github.com/oxisto/money-gopher/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PortfolioServiceName is the fully-qualified name of the PortfolioService service.
	PortfolioServiceName = "mgo.portfolio.v1.PortfolioService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PortfolioServiceCreatePortfolioProcedure is the fully-qualified name of the PortfolioService's
	// CreatePortfolio RPC.
	PortfolioServiceCreatePortfolioProcedure = "/mgo.portfolio.v1.PortfolioService/CreatePortfolio"
)

// PortfolioServiceClient is a client for the mgo.portfolio.v1.PortfolioService service.
type PortfolioServiceClient interface {
	CreatePortfolio(context.Context, *connect_go.Request[gen.PortfolioCreateMessage]) (*connect_go.Response[gen.Portfolio], error)
}

// NewPortfolioServiceClient constructs a client for the mgo.portfolio.v1.PortfolioService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPortfolioServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PortfolioServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &portfolioServiceClient{
		createPortfolio: connect_go.NewClient[gen.PortfolioCreateMessage, gen.Portfolio](
			httpClient,
			baseURL+PortfolioServiceCreatePortfolioProcedure,
			opts...,
		),
	}
}

// portfolioServiceClient implements PortfolioServiceClient.
type portfolioServiceClient struct {
	createPortfolio *connect_go.Client[gen.PortfolioCreateMessage, gen.Portfolio]
}

// CreatePortfolio calls mgo.portfolio.v1.PortfolioService.CreatePortfolio.
func (c *portfolioServiceClient) CreatePortfolio(ctx context.Context, req *connect_go.Request[gen.PortfolioCreateMessage]) (*connect_go.Response[gen.Portfolio], error) {
	return c.createPortfolio.CallUnary(ctx, req)
}

// PortfolioServiceHandler is an implementation of the mgo.portfolio.v1.PortfolioService service.
type PortfolioServiceHandler interface {
	CreatePortfolio(context.Context, *connect_go.Request[gen.PortfolioCreateMessage]) (*connect_go.Response[gen.Portfolio], error)
}

// NewPortfolioServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPortfolioServiceHandler(svc PortfolioServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(PortfolioServiceCreatePortfolioProcedure, connect_go.NewUnaryHandler(
		PortfolioServiceCreatePortfolioProcedure,
		svc.CreatePortfolio,
		opts...,
	))
	return "/mgo.portfolio.v1.PortfolioService/", mux
}

// UnimplementedPortfolioServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPortfolioServiceHandler struct{}

func (UnimplementedPortfolioServiceHandler) CreatePortfolio(context.Context, *connect_go.Request[gen.PortfolioCreateMessage]) (*connect_go.Response[gen.Portfolio], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mgo.portfolio.v1.PortfolioService.CreatePortfolio is not implemented"))
}
