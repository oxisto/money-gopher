// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file mgo.proto (package mgo.portfolio.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum mgo.portfolio.v1.PortfolioEventType
 */
export enum PortfolioEventType {
  /**
   * @generated from enum value: PORTFOLIO_EVENT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PORTFOLIO_EVENT_TYPE_BUY = 1;
   */
  BUY = 1,

  /**
   * @generated from enum value: PORTFOLIO_EVENT_TYPE_SELL = 2;
   */
  SELL = 2,

  /**
   * @generated from enum value: PORTFOLIO_EVENT_TYPE_DELIVERY_INBOUND = 3;
   */
  DELIVERY_INBOUND = 3,

  /**
   * @generated from enum value: PORTFOLIO_EVENT_TYPE_DELIVERY_OUTBOUND = 4;
   */
  DELIVERY_OUTBOUND = 4,

  /**
   * @generated from enum value: PORTFOLIO_EVENT_TYPE_DIVIDEND = 10;
   */
  DIVIDEND = 10,

  /**
   * @generated from enum value: PORTFOLIO_EVENT_TYPE_INTEREST = 11;
   */
  INTEREST = 11,

  /**
   * @generated from enum value: PORTFOLIO_EVENT_TYPE_DEPOSIT_CASH = 20;
   */
  DEPOSIT_CASH = 20,

  /**
   * @generated from enum value: PORTFOLIO_EVENT_TYPE_WITHDRAW_CASH = 21;
   */
  WITHDRAW_CASH = 21,

  /**
   * @generated from enum value: PORTFOLIO_EVENT_TYPE_ACCOUNT_FEES = 30;
   */
  ACCOUNT_FEES = 30,

  /**
   * @generated from enum value: PORTFOLIO_EVENT_TYPE_TAX_REFUND = 31;
   */
  TAX_REFUND = 31,
}
// Retrieve enum metadata with: proto3.getEnumType(PortfolioEventType)
proto3.util.setEnumType(PortfolioEventType, "mgo.portfolio.v1.PortfolioEventType", [
  { no: 0, name: "PORTFOLIO_EVENT_TYPE_UNSPECIFIED" },
  { no: 1, name: "PORTFOLIO_EVENT_TYPE_BUY" },
  { no: 2, name: "PORTFOLIO_EVENT_TYPE_SELL" },
  { no: 3, name: "PORTFOLIO_EVENT_TYPE_DELIVERY_INBOUND" },
  { no: 4, name: "PORTFOLIO_EVENT_TYPE_DELIVERY_OUTBOUND" },
  { no: 10, name: "PORTFOLIO_EVENT_TYPE_DIVIDEND" },
  { no: 11, name: "PORTFOLIO_EVENT_TYPE_INTEREST" },
  { no: 20, name: "PORTFOLIO_EVENT_TYPE_DEPOSIT_CASH" },
  { no: 21, name: "PORTFOLIO_EVENT_TYPE_WITHDRAW_CASH" },
  { no: 30, name: "PORTFOLIO_EVENT_TYPE_ACCOUNT_FEES" },
  { no: 31, name: "PORTFOLIO_EVENT_TYPE_TAX_REFUND" },
]);

/**
 * Currency is a currency value in the lowest unit of the selected currency
 * (e.g., cents for EUR/USD).
 *
 * @generated from message mgo.portfolio.v1.Currency
 */
export class Currency extends Message<Currency> {
  /**
   * @generated from field: int32 value = 1;
   */
  value = 0;

  /**
   * @generated from field: string symbol = 2;
   */
  symbol = "";

  constructor(data?: PartialMessage<Currency>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.Currency";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Currency {
    return new Currency().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Currency {
    return new Currency().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Currency {
    return new Currency().fromJsonString(jsonString, options);
  }

  static equals(a: Currency | PlainMessage<Currency> | undefined, b: Currency | PlainMessage<Currency> | undefined): boolean {
    return proto3.util.equals(Currency, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.CreatePortfolioRequest
 */
export class CreatePortfolioRequest extends Message<CreatePortfolioRequest> {
  /**
   * @generated from field: mgo.portfolio.v1.Portfolio portfolio = 1;
   */
  portfolio?: Portfolio;

  constructor(data?: PartialMessage<CreatePortfolioRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.CreatePortfolioRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "portfolio", kind: "message", T: Portfolio },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePortfolioRequest {
    return new CreatePortfolioRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePortfolioRequest {
    return new CreatePortfolioRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePortfolioRequest {
    return new CreatePortfolioRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePortfolioRequest | PlainMessage<CreatePortfolioRequest> | undefined, b: CreatePortfolioRequest | PlainMessage<CreatePortfolioRequest> | undefined): boolean {
    return proto3.util.equals(CreatePortfolioRequest, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.ListPortfoliosRequest
 */
export class ListPortfoliosRequest extends Message<ListPortfoliosRequest> {
  constructor(data?: PartialMessage<ListPortfoliosRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.ListPortfoliosRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPortfoliosRequest {
    return new ListPortfoliosRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPortfoliosRequest {
    return new ListPortfoliosRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPortfoliosRequest {
    return new ListPortfoliosRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPortfoliosRequest | PlainMessage<ListPortfoliosRequest> | undefined, b: ListPortfoliosRequest | PlainMessage<ListPortfoliosRequest> | undefined): boolean {
    return proto3.util.equals(ListPortfoliosRequest, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.ListPortfoliosResponse
 */
export class ListPortfoliosResponse extends Message<ListPortfoliosResponse> {
  /**
   * @generated from field: repeated mgo.portfolio.v1.Portfolio portfolios = 1;
   */
  portfolios: Portfolio[] = [];

  constructor(data?: PartialMessage<ListPortfoliosResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.ListPortfoliosResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "portfolios", kind: "message", T: Portfolio, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPortfoliosResponse {
    return new ListPortfoliosResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPortfoliosResponse {
    return new ListPortfoliosResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPortfoliosResponse {
    return new ListPortfoliosResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPortfoliosResponse | PlainMessage<ListPortfoliosResponse> | undefined, b: ListPortfoliosResponse | PlainMessage<ListPortfoliosResponse> | undefined): boolean {
    return proto3.util.equals(ListPortfoliosResponse, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.GetPortfolioRequest
 */
export class GetPortfolioRequest extends Message<GetPortfolioRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetPortfolioRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.GetPortfolioRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPortfolioRequest {
    return new GetPortfolioRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPortfolioRequest {
    return new GetPortfolioRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPortfolioRequest {
    return new GetPortfolioRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPortfolioRequest | PlainMessage<GetPortfolioRequest> | undefined, b: GetPortfolioRequest | PlainMessage<GetPortfolioRequest> | undefined): boolean {
    return proto3.util.equals(GetPortfolioRequest, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.UpdatePortfolioRequest
 */
export class UpdatePortfolioRequest extends Message<UpdatePortfolioRequest> {
  /**
   * @generated from field: mgo.portfolio.v1.Portfolio portfolio = 1;
   */
  portfolio?: Portfolio;

  /**
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdatePortfolioRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.UpdatePortfolioRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "portfolio", kind: "message", T: Portfolio },
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePortfolioRequest {
    return new UpdatePortfolioRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePortfolioRequest {
    return new UpdatePortfolioRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePortfolioRequest {
    return new UpdatePortfolioRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePortfolioRequest | PlainMessage<UpdatePortfolioRequest> | undefined, b: UpdatePortfolioRequest | PlainMessage<UpdatePortfolioRequest> | undefined): boolean {
    return proto3.util.equals(UpdatePortfolioRequest, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.DeletePortfolioRequest
 */
export class DeletePortfolioRequest extends Message<DeletePortfolioRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeletePortfolioRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.DeletePortfolioRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePortfolioRequest {
    return new DeletePortfolioRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePortfolioRequest {
    return new DeletePortfolioRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePortfolioRequest {
    return new DeletePortfolioRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePortfolioRequest | PlainMessage<DeletePortfolioRequest> | undefined, b: DeletePortfolioRequest | PlainMessage<DeletePortfolioRequest> | undefined): boolean {
    return proto3.util.equals(DeletePortfolioRequest, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.GetPortfolioSnapshotRequest
 */
export class GetPortfolioSnapshotRequest extends Message<GetPortfolioSnapshotRequest> {
  /**
   * PortfolioName is the name / identifier of the portfolio we want to
   * "snapshot".
   *
   * @generated from field: string portfolio_name = 1;
   */
  portfolioName = "";

  /**
   * Time is the point in time of the requested snapshot.
   *
   * @generated from field: google.protobuf.Timestamp time = 2;
   */
  time?: Timestamp;

  constructor(data?: PartialMessage<GetPortfolioSnapshotRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.GetPortfolioSnapshotRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "portfolio_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPortfolioSnapshotRequest {
    return new GetPortfolioSnapshotRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPortfolioSnapshotRequest {
    return new GetPortfolioSnapshotRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPortfolioSnapshotRequest {
    return new GetPortfolioSnapshotRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPortfolioSnapshotRequest | PlainMessage<GetPortfolioSnapshotRequest> | undefined, b: GetPortfolioSnapshotRequest | PlainMessage<GetPortfolioSnapshotRequest> | undefined): boolean {
    return proto3.util.equals(GetPortfolioSnapshotRequest, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.CreatePortfolioTransactionRequest
 */
export class CreatePortfolioTransactionRequest extends Message<CreatePortfolioTransactionRequest> {
  /**
   * @generated from field: mgo.portfolio.v1.PortfolioEvent transaction = 1;
   */
  transaction?: PortfolioEvent;

  constructor(data?: PartialMessage<CreatePortfolioTransactionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.CreatePortfolioTransactionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction", kind: "message", T: PortfolioEvent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePortfolioTransactionRequest {
    return new CreatePortfolioTransactionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePortfolioTransactionRequest {
    return new CreatePortfolioTransactionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePortfolioTransactionRequest {
    return new CreatePortfolioTransactionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePortfolioTransactionRequest | PlainMessage<CreatePortfolioTransactionRequest> | undefined, b: CreatePortfolioTransactionRequest | PlainMessage<CreatePortfolioTransactionRequest> | undefined): boolean {
    return proto3.util.equals(CreatePortfolioTransactionRequest, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.GetPortfolioTransactionRequest
 */
export class GetPortfolioTransactionRequest extends Message<GetPortfolioTransactionRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetPortfolioTransactionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.GetPortfolioTransactionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPortfolioTransactionRequest {
    return new GetPortfolioTransactionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPortfolioTransactionRequest {
    return new GetPortfolioTransactionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPortfolioTransactionRequest {
    return new GetPortfolioTransactionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPortfolioTransactionRequest | PlainMessage<GetPortfolioTransactionRequest> | undefined, b: GetPortfolioTransactionRequest | PlainMessage<GetPortfolioTransactionRequest> | undefined): boolean {
    return proto3.util.equals(GetPortfolioTransactionRequest, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.ListPortfolioTransactionsRequest
 */
export class ListPortfolioTransactionsRequest extends Message<ListPortfolioTransactionsRequest> {
  /**
   * @generated from field: string portfolio_name = 1;
   */
  portfolioName = "";

  constructor(data?: PartialMessage<ListPortfolioTransactionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.ListPortfolioTransactionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "portfolio_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPortfolioTransactionsRequest {
    return new ListPortfolioTransactionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPortfolioTransactionsRequest {
    return new ListPortfolioTransactionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPortfolioTransactionsRequest {
    return new ListPortfolioTransactionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPortfolioTransactionsRequest | PlainMessage<ListPortfolioTransactionsRequest> | undefined, b: ListPortfolioTransactionsRequest | PlainMessage<ListPortfolioTransactionsRequest> | undefined): boolean {
    return proto3.util.equals(ListPortfolioTransactionsRequest, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.ListPortfolioTransactionsResponse
 */
export class ListPortfolioTransactionsResponse extends Message<ListPortfolioTransactionsResponse> {
  /**
   * @generated from field: repeated mgo.portfolio.v1.PortfolioEvent transactions = 1;
   */
  transactions: PortfolioEvent[] = [];

  constructor(data?: PartialMessage<ListPortfolioTransactionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.ListPortfolioTransactionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transactions", kind: "message", T: PortfolioEvent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPortfolioTransactionsResponse {
    return new ListPortfolioTransactionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPortfolioTransactionsResponse {
    return new ListPortfolioTransactionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPortfolioTransactionsResponse {
    return new ListPortfolioTransactionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPortfolioTransactionsResponse | PlainMessage<ListPortfolioTransactionsResponse> | undefined, b: ListPortfolioTransactionsResponse | PlainMessage<ListPortfolioTransactionsResponse> | undefined): boolean {
    return proto3.util.equals(ListPortfolioTransactionsResponse, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.UpdatePortfolioTransactionRequest
 */
export class UpdatePortfolioTransactionRequest extends Message<UpdatePortfolioTransactionRequest> {
  /**
   * @generated from field: mgo.portfolio.v1.PortfolioEvent transaction = 1;
   */
  transaction?: PortfolioEvent;

  /**
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdatePortfolioTransactionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.UpdatePortfolioTransactionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction", kind: "message", T: PortfolioEvent },
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePortfolioTransactionRequest {
    return new UpdatePortfolioTransactionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePortfolioTransactionRequest {
    return new UpdatePortfolioTransactionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePortfolioTransactionRequest {
    return new UpdatePortfolioTransactionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePortfolioTransactionRequest | PlainMessage<UpdatePortfolioTransactionRequest> | undefined, b: UpdatePortfolioTransactionRequest | PlainMessage<UpdatePortfolioTransactionRequest> | undefined): boolean {
    return proto3.util.equals(UpdatePortfolioTransactionRequest, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.DeletePortfolioTransactionRequest
 */
export class DeletePortfolioTransactionRequest extends Message<DeletePortfolioTransactionRequest> {
  /**
   * @generated from field: int32 transaction_id = 1;
   */
  transactionId = 0;

  constructor(data?: PartialMessage<DeletePortfolioTransactionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.DeletePortfolioTransactionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePortfolioTransactionRequest {
    return new DeletePortfolioTransactionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePortfolioTransactionRequest {
    return new DeletePortfolioTransactionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePortfolioTransactionRequest {
    return new DeletePortfolioTransactionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePortfolioTransactionRequest | PlainMessage<DeletePortfolioTransactionRequest> | undefined, b: DeletePortfolioTransactionRequest | PlainMessage<DeletePortfolioTransactionRequest> | undefined): boolean {
    return proto3.util.equals(DeletePortfolioTransactionRequest, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.ImportTransactionsRequest
 */
export class ImportTransactionsRequest extends Message<ImportTransactionsRequest> {
  /**
   * @generated from field: string portfolio_name = 1;
   */
  portfolioName = "";

  /**
   * @generated from field: string from_csv = 2;
   */
  fromCsv = "";

  constructor(data?: PartialMessage<ImportTransactionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.ImportTransactionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "portfolio_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from_csv", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImportTransactionsRequest {
    return new ImportTransactionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImportTransactionsRequest {
    return new ImportTransactionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImportTransactionsRequest {
    return new ImportTransactionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ImportTransactionsRequest | PlainMessage<ImportTransactionsRequest> | undefined, b: ImportTransactionsRequest | PlainMessage<ImportTransactionsRequest> | undefined): boolean {
    return proto3.util.equals(ImportTransactionsRequest, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.CreateBankAccountRequest
 */
export class CreateBankAccountRequest extends Message<CreateBankAccountRequest> {
  /**
   * @generated from field: mgo.portfolio.v1.BankAccount bank_account = 1;
   */
  bankAccount?: BankAccount;

  constructor(data?: PartialMessage<CreateBankAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.CreateBankAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bank_account", kind: "message", T: BankAccount },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBankAccountRequest {
    return new CreateBankAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBankAccountRequest {
    return new CreateBankAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBankAccountRequest {
    return new CreateBankAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateBankAccountRequest | PlainMessage<CreateBankAccountRequest> | undefined, b: CreateBankAccountRequest | PlainMessage<CreateBankAccountRequest> | undefined): boolean {
    return proto3.util.equals(CreateBankAccountRequest, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.Portfolio
 */
export class Portfolio extends Message<Portfolio> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * BankAccountName contains the name/identifier of the underlying bank
   * account.
   *
   * @generated from field: string bank_account_name = 3;
   */
  bankAccountName = "";

  /**
   * Events contains all portfolio events, such as buy/sell transactions,
   * dividends or other. They need to be ordered by time (ascending).
   *
   * @generated from field: repeated mgo.portfolio.v1.PortfolioEvent events = 5;
   */
  events: PortfolioEvent[] = [];

  constructor(data?: PartialMessage<Portfolio>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.Portfolio";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "bank_account_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "events", kind: "message", T: PortfolioEvent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Portfolio {
    return new Portfolio().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Portfolio {
    return new Portfolio().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Portfolio {
    return new Portfolio().fromJsonString(jsonString, options);
  }

  static equals(a: Portfolio | PlainMessage<Portfolio> | undefined, b: Portfolio | PlainMessage<Portfolio> | undefined): boolean {
    return proto3.util.equals(Portfolio, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.BankAccount
 */
export class BankAccount extends Message<BankAccount> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  constructor(data?: PartialMessage<BankAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.BankAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BankAccount {
    return new BankAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BankAccount {
    return new BankAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BankAccount {
    return new BankAccount().fromJsonString(jsonString, options);
  }

  static equals(a: BankAccount | PlainMessage<BankAccount> | undefined, b: BankAccount | PlainMessage<BankAccount> | undefined): boolean {
    return proto3.util.equals(BankAccount, a, b);
  }
}

/**
 * PortfolioSnapshot represents a snapshot in time of the portfolio. It can for
 * example be the current state of the portfolio but also represent the state of
 * the portfolio at a certain time in the past.
 *
 * @generated from message mgo.portfolio.v1.PortfolioSnapshot
 */
export class PortfolioSnapshot extends Message<PortfolioSnapshot> {
  /**
   * Time is the time when this snapshot was taken.
   *
   * @generated from field: google.protobuf.Timestamp time = 1;
   */
  time?: Timestamp;

  /**
   * Positions holds the current positions within the snapshot and their value.
   *
   * @generated from field: map<string, mgo.portfolio.v1.PortfolioPosition> positions = 2;
   */
  positions: { [key: string]: PortfolioPosition } = {};

  /**
   * FirstTransactionTime is the time of the first transaction with the
   * snapshot.
   *
   * @generated from field: optional google.protobuf.Timestamp first_transaction_time = 3;
   */
  firstTransactionTime?: Timestamp;

  /**
   * TotalPurchaseValue contains the total purchase value of all asset positions
   *
   * @generated from field: mgo.portfolio.v1.Currency total_purchase_value = 10;
   */
  totalPurchaseValue?: Currency;

  /**
   * TotalMarketValue contains the total market value of all asset positions
   *
   * @generated from field: mgo.portfolio.v1.Currency total_market_value = 11;
   */
  totalMarketValue?: Currency;

  /**
   * TotalProfitOrLoss contains the total absolute amount of profit or loss in
   * this snapshot, based on asset value.
   *
   * @generated from field: mgo.portfolio.v1.Currency total_profit_or_loss = 20;
   */
  totalProfitOrLoss?: Currency;

  /**
   * TotalGains contains the total relative amount of profit or loss in this
   * snapshot, based on asset value.
   *
   * @generated from field: double total_gains = 21;
   */
  totalGains = 0;

  /**
   * Cash contains the current amount of cash in the portfolio's bank
   * account(s).
   *
   * @generated from field: mgo.portfolio.v1.Currency cash = 22;
   */
  cash?: Currency;

  /**
   * TotalPortfolioValue contains the amount of cash plus the total market value
   * of all assets.
   *
   * @generated from field: mgo.portfolio.v1.Currency total_portfolio_value = 23;
   */
  totalPortfolioValue?: Currency;

  constructor(data?: PartialMessage<PortfolioSnapshot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.PortfolioSnapshot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "message", T: Timestamp },
    { no: 2, name: "positions", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: PortfolioPosition} },
    { no: 3, name: "first_transaction_time", kind: "message", T: Timestamp, opt: true },
    { no: 10, name: "total_purchase_value", kind: "message", T: Currency },
    { no: 11, name: "total_market_value", kind: "message", T: Currency },
    { no: 20, name: "total_profit_or_loss", kind: "message", T: Currency },
    { no: 21, name: "total_gains", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 22, name: "cash", kind: "message", T: Currency },
    { no: 23, name: "total_portfolio_value", kind: "message", T: Currency },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PortfolioSnapshot {
    return new PortfolioSnapshot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PortfolioSnapshot {
    return new PortfolioSnapshot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PortfolioSnapshot {
    return new PortfolioSnapshot().fromJsonString(jsonString, options);
  }

  static equals(a: PortfolioSnapshot | PlainMessage<PortfolioSnapshot> | undefined, b: PortfolioSnapshot | PlainMessage<PortfolioSnapshot> | undefined): boolean {
    return proto3.util.equals(PortfolioSnapshot, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.PortfolioPosition
 */
export class PortfolioPosition extends Message<PortfolioPosition> {
  /**
   * @generated from field: mgo.portfolio.v1.Security security = 1;
   */
  security?: Security;

  /**
   * @generated from field: double amount = 2;
   */
  amount = 0;

  /**
   * PurchaseValue was the market value of this position when it was bought
   * (net; exclusive of any fees).
   *
   * @generated from field: mgo.portfolio.v1.Currency purchase_value = 5;
   */
  purchaseValue?: Currency;

  /**
   * PurchasePrice was the market price of this position when it was bought
   * (net; exclusive of any fees).
   *
   * @generated from field: mgo.portfolio.v1.Currency purchase_price = 6;
   */
  purchasePrice?: Currency;

  /**
   * MarketValue is the current market value of this position, as retrieved from
   * the securities service.
   *
   * @generated from field: mgo.portfolio.v1.Currency market_value = 10;
   */
  marketValue?: Currency;

  /**
   * MarketPrice is the current market price of this position, as retrieved from
   * the securities service.
   *
   * @generated from field: mgo.portfolio.v1.Currency market_price = 11;
   */
  marketPrice?: Currency;

  /**
   * TotalFees is the total amount of fees accumulating in this position through
   * various transactions.
   *
   * @generated from field: mgo.portfolio.v1.Currency total_fees = 15;
   */
  totalFees?: Currency;

  /**
   * ProfitOrLoss contains the absolute amount of profit or loss in this
   * position.
   *
   * @generated from field: mgo.portfolio.v1.Currency profit_or_loss = 20;
   */
  profitOrLoss?: Currency;

  /**
   * Gains contains the relative amount of profit or loss in this position.
   *
   * @generated from field: double gains = 21;
   */
  gains = 0;

  constructor(data?: PartialMessage<PortfolioPosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.PortfolioPosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "security", kind: "message", T: Security },
    { no: 2, name: "amount", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "purchase_value", kind: "message", T: Currency },
    { no: 6, name: "purchase_price", kind: "message", T: Currency },
    { no: 10, name: "market_value", kind: "message", T: Currency },
    { no: 11, name: "market_price", kind: "message", T: Currency },
    { no: 15, name: "total_fees", kind: "message", T: Currency },
    { no: 20, name: "profit_or_loss", kind: "message", T: Currency },
    { no: 21, name: "gains", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PortfolioPosition {
    return new PortfolioPosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PortfolioPosition {
    return new PortfolioPosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PortfolioPosition {
    return new PortfolioPosition().fromJsonString(jsonString, options);
  }

  static equals(a: PortfolioPosition | PlainMessage<PortfolioPosition> | undefined, b: PortfolioPosition | PlainMessage<PortfolioPosition> | undefined): boolean {
    return proto3.util.equals(PortfolioPosition, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.PortfolioEvent
 */
export class PortfolioEvent extends Message<PortfolioEvent> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: mgo.portfolio.v1.PortfolioEventType type = 2;
   */
  type = PortfolioEventType.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.Timestamp time = 3;
   */
  time?: Timestamp;

  /**
   * @generated from field: string portfolio_name = 4;
   */
  portfolioName = "";

  /**
   * @generated from field: string security_name = 5;
   */
  securityName = "";

  /**
   * @generated from field: double amount = 10;
   */
  amount = 0;

  /**
   * @generated from field: mgo.portfolio.v1.Currency price = 11;
   */
  price?: Currency;

  /**
   * @generated from field: mgo.portfolio.v1.Currency fees = 12;
   */
  fees?: Currency;

  /**
   * @generated from field: mgo.portfolio.v1.Currency taxes = 13;
   */
  taxes?: Currency;

  constructor(data?: PartialMessage<PortfolioEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.PortfolioEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(PortfolioEventType) },
    { no: 3, name: "time", kind: "message", T: Timestamp },
    { no: 4, name: "portfolio_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "security_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "amount", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 11, name: "price", kind: "message", T: Currency },
    { no: 12, name: "fees", kind: "message", T: Currency },
    { no: 13, name: "taxes", kind: "message", T: Currency },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PortfolioEvent {
    return new PortfolioEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PortfolioEvent {
    return new PortfolioEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PortfolioEvent {
    return new PortfolioEvent().fromJsonString(jsonString, options);
  }

  static equals(a: PortfolioEvent | PlainMessage<PortfolioEvent> | undefined, b: PortfolioEvent | PlainMessage<PortfolioEvent> | undefined): boolean {
    return proto3.util.equals(PortfolioEvent, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.Security
 */
export class Security extends Message<Security> {
  /**
   * Name contains the unique resource name. For a stock or bond, this should be
   * an ISIN.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * DisplayName contains the human readable name.
   *
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * @generated from field: repeated mgo.portfolio.v1.ListedSecurity listed_on = 4;
   */
  listedOn: ListedSecurity[] = [];

  /**
   * @generated from field: optional string quote_provider = 10;
   */
  quoteProvider?: string;

  constructor(data?: PartialMessage<Security>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.Security";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "listed_on", kind: "message", T: ListedSecurity, repeated: true },
    { no: 10, name: "quote_provider", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Security {
    return new Security().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Security {
    return new Security().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Security {
    return new Security().fromJsonString(jsonString, options);
  }

  static equals(a: Security | PlainMessage<Security> | undefined, b: Security | PlainMessage<Security> | undefined): boolean {
    return proto3.util.equals(Security, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.ListedSecurity
 */
export class ListedSecurity extends Message<ListedSecurity> {
  /**
   * @generated from field: string security_name = 1;
   */
  securityName = "";

  /**
   * @generated from field: string ticker = 3;
   */
  ticker = "";

  /**
   * @generated from field: string currency = 4;
   */
  currency = "";

  /**
   * @generated from field: optional mgo.portfolio.v1.Currency latest_quote = 5;
   */
  latestQuote?: Currency;

  /**
   * @generated from field: optional google.protobuf.Timestamp latest_quote_timestamp = 6;
   */
  latestQuoteTimestamp?: Timestamp;

  constructor(data?: PartialMessage<ListedSecurity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.ListedSecurity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "security_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "latest_quote", kind: "message", T: Currency, opt: true },
    { no: 6, name: "latest_quote_timestamp", kind: "message", T: Timestamp, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListedSecurity {
    return new ListedSecurity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListedSecurity {
    return new ListedSecurity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListedSecurity {
    return new ListedSecurity().fromJsonString(jsonString, options);
  }

  static equals(a: ListedSecurity | PlainMessage<ListedSecurity> | undefined, b: ListedSecurity | PlainMessage<ListedSecurity> | undefined): boolean {
    return proto3.util.equals(ListedSecurity, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.ListSecuritiesRequest
 */
export class ListSecuritiesRequest extends Message<ListSecuritiesRequest> {
  /**
   * @generated from field: optional mgo.portfolio.v1.ListSecuritiesRequest.Filter filter = 5;
   */
  filter?: ListSecuritiesRequest_Filter;

  constructor(data?: PartialMessage<ListSecuritiesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.ListSecuritiesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "filter", kind: "message", T: ListSecuritiesRequest_Filter, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSecuritiesRequest {
    return new ListSecuritiesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSecuritiesRequest {
    return new ListSecuritiesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSecuritiesRequest {
    return new ListSecuritiesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSecuritiesRequest | PlainMessage<ListSecuritiesRequest> | undefined, b: ListSecuritiesRequest | PlainMessage<ListSecuritiesRequest> | undefined): boolean {
    return proto3.util.equals(ListSecuritiesRequest, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.ListSecuritiesRequest.Filter
 */
export class ListSecuritiesRequest_Filter extends Message<ListSecuritiesRequest_Filter> {
  /**
   * @generated from field: repeated string security_names = 1;
   */
  securityNames: string[] = [];

  constructor(data?: PartialMessage<ListSecuritiesRequest_Filter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.ListSecuritiesRequest.Filter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "security_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSecuritiesRequest_Filter {
    return new ListSecuritiesRequest_Filter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSecuritiesRequest_Filter {
    return new ListSecuritiesRequest_Filter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSecuritiesRequest_Filter {
    return new ListSecuritiesRequest_Filter().fromJsonString(jsonString, options);
  }

  static equals(a: ListSecuritiesRequest_Filter | PlainMessage<ListSecuritiesRequest_Filter> | undefined, b: ListSecuritiesRequest_Filter | PlainMessage<ListSecuritiesRequest_Filter> | undefined): boolean {
    return proto3.util.equals(ListSecuritiesRequest_Filter, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.ListSecuritiesResponse
 */
export class ListSecuritiesResponse extends Message<ListSecuritiesResponse> {
  /**
   * @generated from field: repeated mgo.portfolio.v1.Security securities = 1;
   */
  securities: Security[] = [];

  constructor(data?: PartialMessage<ListSecuritiesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.ListSecuritiesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "securities", kind: "message", T: Security, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSecuritiesResponse {
    return new ListSecuritiesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSecuritiesResponse {
    return new ListSecuritiesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSecuritiesResponse {
    return new ListSecuritiesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSecuritiesResponse | PlainMessage<ListSecuritiesResponse> | undefined, b: ListSecuritiesResponse | PlainMessage<ListSecuritiesResponse> | undefined): boolean {
    return proto3.util.equals(ListSecuritiesResponse, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.GetSecurityRequest
 */
export class GetSecurityRequest extends Message<GetSecurityRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetSecurityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.GetSecurityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSecurityRequest {
    return new GetSecurityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSecurityRequest {
    return new GetSecurityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSecurityRequest {
    return new GetSecurityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSecurityRequest | PlainMessage<GetSecurityRequest> | undefined, b: GetSecurityRequest | PlainMessage<GetSecurityRequest> | undefined): boolean {
    return proto3.util.equals(GetSecurityRequest, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.CreateSecurityRequest
 */
export class CreateSecurityRequest extends Message<CreateSecurityRequest> {
  /**
   * @generated from field: mgo.portfolio.v1.Security security = 1;
   */
  security?: Security;

  constructor(data?: PartialMessage<CreateSecurityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.CreateSecurityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "security", kind: "message", T: Security },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSecurityRequest {
    return new CreateSecurityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSecurityRequest {
    return new CreateSecurityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSecurityRequest {
    return new CreateSecurityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSecurityRequest | PlainMessage<CreateSecurityRequest> | undefined, b: CreateSecurityRequest | PlainMessage<CreateSecurityRequest> | undefined): boolean {
    return proto3.util.equals(CreateSecurityRequest, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.UpdateSecurityRequest
 */
export class UpdateSecurityRequest extends Message<UpdateSecurityRequest> {
  /**
   * @generated from field: mgo.portfolio.v1.Security security = 1;
   */
  security?: Security;

  /**
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateSecurityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.UpdateSecurityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "security", kind: "message", T: Security },
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSecurityRequest {
    return new UpdateSecurityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSecurityRequest {
    return new UpdateSecurityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSecurityRequest {
    return new UpdateSecurityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSecurityRequest | PlainMessage<UpdateSecurityRequest> | undefined, b: UpdateSecurityRequest | PlainMessage<UpdateSecurityRequest> | undefined): boolean {
    return proto3.util.equals(UpdateSecurityRequest, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.DeleteSecurityRequest
 */
export class DeleteSecurityRequest extends Message<DeleteSecurityRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteSecurityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.DeleteSecurityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSecurityRequest {
    return new DeleteSecurityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSecurityRequest {
    return new DeleteSecurityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSecurityRequest {
    return new DeleteSecurityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSecurityRequest | PlainMessage<DeleteSecurityRequest> | undefined, b: DeleteSecurityRequest | PlainMessage<DeleteSecurityRequest> | undefined): boolean {
    return proto3.util.equals(DeleteSecurityRequest, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.TriggerQuoteUpdateRequest
 */
export class TriggerQuoteUpdateRequest extends Message<TriggerQuoteUpdateRequest> {
  /**
   * @generated from field: repeated string security_names = 1;
   */
  securityNames: string[] = [];

  constructor(data?: PartialMessage<TriggerQuoteUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.TriggerQuoteUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "security_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerQuoteUpdateRequest {
    return new TriggerQuoteUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerQuoteUpdateRequest {
    return new TriggerQuoteUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerQuoteUpdateRequest {
    return new TriggerQuoteUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerQuoteUpdateRequest | PlainMessage<TriggerQuoteUpdateRequest> | undefined, b: TriggerQuoteUpdateRequest | PlainMessage<TriggerQuoteUpdateRequest> | undefined): boolean {
    return proto3.util.equals(TriggerQuoteUpdateRequest, a, b);
  }
}

/**
 * @generated from message mgo.portfolio.v1.TriggerQuoteUpdateResponse
 */
export class TriggerQuoteUpdateResponse extends Message<TriggerQuoteUpdateResponse> {
  constructor(data?: PartialMessage<TriggerQuoteUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgo.portfolio.v1.TriggerQuoteUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerQuoteUpdateResponse {
    return new TriggerQuoteUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerQuoteUpdateResponse {
    return new TriggerQuoteUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerQuoteUpdateResponse {
    return new TriggerQuoteUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerQuoteUpdateResponse | PlainMessage<TriggerQuoteUpdateResponse> | undefined, b: TriggerQuoteUpdateResponse | PlainMessage<TriggerQuoteUpdateResponse> | undefined): boolean {
    return proto3.util.equals(TriggerQuoteUpdateResponse, a, b);
  }
}

